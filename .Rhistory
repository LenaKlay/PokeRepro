blogdown::new_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
gh_token_help()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
usethis::use_description()
usethis::use_package("ggplot2")
usethis::use_package("ggpubr")
usethis::use_package("knitr")
blogdown::serve_site()
pkg_name       <- "mFD"
published_date <- "2021-11-05"
x <- cranlogs::cran_downloads(pkg_name, from = published_date, to = Sys.Date() - 1)
trend <- ggplot2::ggplot(x, ggplot2::aes(date, count)) +
ggplot2::geom_col() +
ggplot2::geom_label(label = x$"count", nudge_y = 1, family = "serif",
fontface = "bold", fill = "#4D77B9", color = "white",
size = 3, label.size = 0) +
ggplot2::xlab("") +
ggplot2::ylab(sprintf("Nr of downloads of %s (%s)", pkg_name, sum(x$"count"))) +
ggplot2::theme_bw() +
ggplot2::theme(text = ggplot2::element_text(family = "serif"))
trend
setwd("C:/Users/camil/Camille")
trend <- ggplot2::ggplot(x, ggplot2::aes(date, count)) +
ggplot2::geom_col() +
ggplot2::geom_label(label = x$"count", nudge_y = 1, family = "serif",
fontface = "bold", fill = "#4D77B9", color = "white",
size = 3, label.size = 0) +
ggplot2::xlab("") +
ggplot2::ylab(sprintf("Nr of downloads of %s (%s)", pkg_name, sum(x$"count"))) +
ggplot2::theme_bw() +
ggplot2::theme(text = ggplot2::element_text(family = "serif"))
ggplot2::ggsave(filename = paste0("./", pkg_name, "-trends.png"),
plot = trend, device = "png", width = 12, height = 6,
units = "in", pointsize = 12, dpi = 600)
x <- cranlogs::cran_downloads(pkg_name, from = published_date, to = Sys.Date())
trend <- ggplot2::ggplot(x, ggplot2::aes(date, count)) +
ggplot2::geom_col() +
ggplot2::geom_label(label = x$"count", nudge_y = 1, family = "serif",
fontface = "bold", fill = "#4D77B9", color = "white",
size = 3, label.size = 0) +
ggplot2::xlab("") +
ggplot2::ylab(sprintf("Nr of downloads of %s (%s)", pkg_name, sum(x$"count"))) +
ggplot2::theme_bw() +
ggplot2::theme(text = ggplot2::element_text(family = "serif"))
ggplot2::ggsave(filename = paste0("./", pkg_name, "-trends.png"),
plot = trend, device = "png", width = 12, height = 6,
units = "in", pointsize = 12, dpi = 600)
setwd("C:/Users/camil/Camille/1_These/17_Formations_cours/3_Reprod_recherche/1_Cours/PokeRepro")
blogdown::serve_site()
# Give the relative path to the data and read the data:
pokedata <- readr::read_csv(here::here("data", "pokemon.csv"))
#  Load defined functions of the R folder
source(here::here("R", "01_clean_data_function.R"))
source(here::here("R", "02_plot_function.R"))
source(here::here("R", "03_regression_function.R"))
# Run analyses scripts
source(here::here("analysis", "01_clean_data.R"))
source(here::here("analysis", "02_plot.R"))
source(here::here("analysis", "03_regression.R"))
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
library(mFD)
# Load data:
data("fruits_traits", package = "mFD")
# Remove fuzzy traits in this tutorial:
fruits_traits <- fruits_traits[ , -c(6:8)]
# Display the table:
knitr::kable(head(fruits_traits),
caption = "Species x traits data frame")
# Load data:
data("baskets_fruits_weights", package = "mFD")
# Display the table:
knitr::kable(as.data.frame(baskets_fruits_weights[1:6, 1:6]),
centering = TRUE,
caption = "Species x assemblages matrix based on the **fruits** dataset")
# Load data:
data("fruits_traits_cat", package = "mFD")
# Remove fuzzy traits in this tutorial:
fruits_traits_cat <- fruits_traits_cat[-c(6:8), ]
# Thus remove the "fuzzy_name" column:
fruits_traits_cat <- fruits_traits_cat[ , -3]
# Display the table:
knitr::kable(head(fruits_traits_cat),
caption = "Traits types based on **fruits & baskets** dataset")
# Summary of the assemblages * species dataframe:
asb_sp_fruits_summ <- mFD::asb.sp.summary(asb_sp_w = baskets_fruits_weights)
asb_sp_fruits_occ <- asb_sp_fruits_summ$"asb_sp_occ"
sp_dist_fruits <- mFD::funct.dist(
sp_tr         = fruits_traits,
tr_cat        = fruits_traits_cat,
metric        = "gower",
scale_euclid  = "scale_center",
ordinal_var   = "classic",
weight_type   = "equal",
stop_if_NA    = TRUE)
fspaces_quality_fruits <- mFD::quality.fspaces(
sp_dist             = sp_dist_fruits,
maxdim_pcoa         = 10,
deviation_weighting = "absolute",
fdist_scaling       = FALSE,
fdendro             = "average")
mFD::quality.fspaces.plot(
fspaces_quality            = fspaces_quality_fruits,
quality_metric             = "mad",
fspaces_plot               = c("tree_average", "pcoa_2d", "pcoa_3d",
"pcoa_4d", "pcoa_5d", "pcoa_6d"),
name_file                  = NULL,
range_dist                 = NULL,
range_dev                  = NULL,
range_qdev                 = NULL,
gradient_deviation         = c(neg = "darkblue", nul = "grey80", pos = "darkred"),
gradient_deviation_quality = c(low = "yellow", high = "red"),
x_lab                      = "Trait-based distance")
sp_faxes_coord_fruits <- fspaces_quality_fruits$"details_fspaces"$"sp_pc_coord"
fruits_tr_faxes <- mFD::traits.faxes.cor(
sp_tr          = fruits_traits,
sp_faxes_coord = sp_faxes_coord_fruits[ , c("PC1", "PC2", "PC3", "PC4")],
plot           = TRUE)
beta_fd_indices_fruits <- mFD::beta.fd.multidim(
sp_faxes_coord   = sp_faxes_coord_fruits[ , c("PC1", "PC2", "PC3", "PC4")],
asb_sp_occ       = asb_sp_fruits_occ,
check_input      = TRUE,
beta_family      = c("Jaccard"),
details_returned = TRUE)
beta_plot_fruits <- mFD::beta.multidim.plot(
output_beta_fd_multidim = beta_fd_indices_fruits,
plot_asb_nm             = c("basket_1", "basket_4"),
beta_family             = c("Jaccard"),
plot_sp_nm              = c("apple", "lemon", "pear"),
faxes                   = paste0("PC", 1:4),
name_file               = NULL,
faxes_nm                = NULL,
range_faxes             = c(NA, NA),
color_bg                = "grey95",
shape_sp                = c("pool" = 3.0, asb1 = 22, asb2 = 21),
size_sp                 = c("pool" = 0.8, asb1 =  1, asb2 =  1),
color_sp                = c("pool" = "grey50", asb1 = "blue", asb2 = "red"),
fill_sp                 = c("pool" = NA, asb1 = "white", asb2 = "white"),
fill_vert               = c("pool" = NA, asb1 = "blue", asb2 = "red"),
color_ch                = c("pool" = NA, asb1 = "blue", asb2 = "red"),
fill_ch                 = c("pool" = "white", asb1 = "blue", asb2 = "red"),
alpha_ch                = c("pool" = 1, asb1 = 0.3, asb2 = 0.3),
nm_size                 = 3,
nm_color                = "black",
nm_fontface             = "plain",
check_input             = TRUE)
build_site()
serve_site()
blogdown::serve_site()
Then, you have to chose the object(s) to return as output(s) of your function. To do so, you use the `return()` function (quite easy right?).
<span style="color: grey;">In our example, we want to return the cleaned dataset called *poke3*, thus the full function looks as follow:</span>
blogdown::stop_server()
blogdown::serve_site()
